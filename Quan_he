Quan hệ phụ thuộc

Quan hệ phụ thuộc là quan hệ mà đối tượng của lớp này sử dụng đối tượng của lớp kia. Ví dụ nếu trong lớp ClassA có sử dụng đối tượng của lớp ClassB (có thể là các thuộc tính, các tham số, các biến cục bộ, ...) thì lớp ClassA có quan hệ phụ thuộc với lớp ClassB. Ví dụ:

class ClassA{
	public void myMethod(ClassB b) {
		b.doWork();
	}
}
Trong trường hợp trên lớp ClassA sẽ phụ thuộc vào lớp ClassB, nếu lớp ClassB thay đổi thì có thể lớp ClassA sẽ phải thay đổi theo.

Đây là quan hệ rộng nhất và được biểu diễn bằng mũi tên nét đứt giống như sau:



Quan hệ kết hợp (Association)

Quan hệ kết hợp xảy ra khi một đối tượng có thuộc tính là một đối tượng khác. Ví dụ: 

class Employee {
	private String name;
	private Manager manager;

	public Employee(String name, Manager manager) {
		this.name = name;
		this.manager = manager;
	}

	public String getManagerName() {
		return manager.getName();
	}

	public String getName() {
		return name;
	}
}

class Manager {
	private String name;

	public Manager(String name) {
		this.name = name;
	}

	public String getName() {
		return name;
	}
}
Trong đoạn code trên lớp Employee có thuộc tính là đối tượng thuộc lớp Manager, do đó hai lớp này có quan hệ kết hợp. Quan hệ kết hợp được chia làm 2 loại là quan hệ thu nạp (Aggregation) và quan hệ hợp thành (Composition)

Quan hệ thu nạp (Aggregation)

Quan hệ thu nạp xảy ra khi một đối tượng có thuộc tính là một đối tượng khác và 2 đối tượng này có thể tồn tại độc lập. Ví dụ:

public class ClassA {       
    ClassB b;
    public void setB(ClassB b){
    	this.b = b;
     }
}
Có thể thấy đối tượng của ClassB tồn tại độc lập với đối tượng của ClassA (ClassA không tạo ra đối tượng của ClassB).



Quan hệ hợp thành (Composition)

Quan hệ hợp thành xảy ra khi đối tượng của lớp ClassB là 1 phần trong đối tượng của lớp ClassA, khi đối tượng của lớp ClassA bị hủy thì đối tượng của ClassB cũng bị hủy theo. Ví dụ mối quan hệ giữa File và Folder, một Folder sẽ có nhiều File và nếu Folder bị hủy thì File cũng bị hủy theo. Quan hệ hợp thành này sẽ được biểu diễn dưới sơ đồ lớp như sau:



Số 1 và ký tự * thể hiện rằng 1 Folder sẽ có nhiều File. Nếu nói tới code thì khi một đối tượng được tạo ra trong một đối tượng khác thì đó là quan hệ hợp thành:

public class ClassA{
	private ClassB b;
	public ClassA() {
		b = new ClsasB();
	}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////
---Point quan hệ độc lập với Line
---------------------Point.java------------------------
public class Point
{
    private int x;
    private int y;

    public Point(int x, int y)
    {
        super();
        this.x = x;
        this.y = y;
    }

    public void setX(int x)
    {
        this.x = x;
    }

    public int getX()
    {
        return x;
    }

    public void setY(int y)
    {
        this.y = y;
    }

    public int getY()
    {
        return y;
    }

}

----------------------------Line.java-----------------------
public class Line
{
    private Point begin;
    private Point end;
    
    public Line(Point begin, Point end)
    {
        this.begin = begin;
        this.end = end;
    }

    public Line(int x1, int y1, int x2, int y2)
    {
        this.begin = new Point(x1, y1);
        this.end = new Point(x2, y2);
    }

    public void setBegin(Point begin)
    {
        this.begin = begin;
    }

    public void setEnd(Point end)
    {
        this.end = end;
    }

    public Point getBegin()
    {
        return begin;
    }

    public Point getEnd()
    {
        return end;
    }

    public double getLength()
    {
        return Math.sqrt(Math.pow(end.getX() - begin.getX(), 2) + Math.pow(end.getY() - begin.getY(), 2));
    }

}
-------------------Triangle.java------------------------
public class Triangle 
{
    private Point vertice1;
    private Point vertice2;
    private Point vertice3;
    
    public Triangle(Point vertice1, Point vertice2, Point vertice3)
    {
        this.vertice1 = vertice1;
        this.vertice2 = vertice2;
        this.vertice3 = vertice3;
    }

    public Triangle(int x1, int y1, int x2, int y2, int x3, int y3)
    {
        vertice1 = new Point(x1, y1);
        vertice2 = new Point(x2, y2);
        vertice3 = new Point(x3, y3);
    }

    
    public double getPerimeter()
    {
        double A = Math.sqrt(Math.pow(vertice2.getX() - vertice3.getX(), 2) + Math.pow(vertice2.getY() - vertice3.getY(), 2));
        double B = Math.sqrt(Math.pow(vertice1.getX() - vertice3.getX(), 2) + Math.pow(vertice1.getY() - vertice3.getY(), 2));
        double C = Math.sqrt(Math.pow(vertice1.getX() - vertice2.getX(), 2) + Math.pow(vertice1.getY() - vertice2.getY(), 2));
        return A + B + C;
    }

}

public class Entry {
	public static void main(String[] args) {
		Point vertice1 = new Point(1, 3);
		Point vertice2 = new Point(2, 3);
		Point vertice3 = new Point(4, 2);
		Triangle triangle1 = new Triangle(vertice1, vertice2, vertice3);
		Triangle triangle2 = new Triangle(4, 5, 2, 6, 3, 7);
		System.out.println(triangle1.getPerimeter());
		System.out.println(triangle2.getPerimeter());
	}
}

---------------------------------------PolyLine.java---------------------------
import java.util.ArrayList;
import java.util.List;

public class PolyLine
{
    private List<Point> points;

    public PolyLine()
    {
        points = new ArrayList<Point>();
    }

    public PolyLine(List<Point> points)
    {
        this.points = points;
    }

    public void appendPoint(Point point)
    {
        points.add(point);
    }

    public void appendPoint(int x, int y)
    {
        points.add(new Point(x, y));
    }

    public double getLength()
    {
        double length = 0;
        for(int i = 0; i < points.size() - 1; i++)
        {
            int x1 = points.get(i).getX();
            int y1 = points.get(i).getY();
            int x2 = points.get(i + 1).getX();
            int y2 = points.get(i + 1).getY();
            double distance = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
            length += distance;
        }
        return length;
    }
}

public class Entry {
	public static void main(String[] args) {
		PolyLine polyLine = new PolyLine();
		polyLine.appendPoint(new Point(1, 1));
		polyLine.appendPoint(new Point(2, 3));
		polyLine.appendPoint(3, 0);
		polyLine.appendPoint(4, 2);
		System.out.println(polyLine.getLength());
	}
}
